/*
 * Please see the included README.md file for license terms and conditions.
 */


// This file is a suggested starting place for your code.
// It is completely optional and not required.
// Note the reference that includes it in the index.html file.


/*jslint browser:true, devel:true, white:true, vars:true */
/*global $:false, intel:false app:false, dev:false, cordova:false */


// For improved debugging and maintenance of your app, it is highly
// recommended that you separate your JavaScript from your HTML files.
// Use the addEventListener() method to associate events with DOM elements.

// For example:

// var el ;
// el = document.getElementById("id_myButton") ;
// el.addEventListener("click", myEventHandler, false) ;



// The function below is an example of the best way to "start" your app.
// This example is calling the standard Cordova "hide splashscreen" function.
// You can add other code to it or add additional functions that are triggered
// by the same event or other events.

function onAppReady() {
    if( navigator.splashscreen && navigator.splashscreen.hide ) {   // Cordova API detected
        navigator.splashscreen.hide() ;
    }
}
document.addEventListener("app.Ready", onAppReady, false) ;
// document.addEventListener("deviceready", onAppReady, false) ;
// document.addEventListener("onload", onAppReady, false) ;

// The app.Ready event shown above is generated by the init-dev.js file; it
// unifies a variety of common "ready" events. See the init-dev.js file for
// more details. You can use a different event to start your app, instead of
// this event. A few examples are shown in the sample code above. If you are
// using Cordova plugins you need to either use this app.Ready event or the
// standard Crordova deviceready event. Others will either not work or will
// work poorly.

// NOTE: change "dev.LOG" in "init-dev.js" to "true" to enable some console.log
// messages that can help you debug Cordova app initialization issues.
  


/*jshint strict: false, -W058*/

function getArray()
{
    var taskList = new Array["Tasks are : "];
    var task = localStorage.getItem("ToDoTasks");
    
    if(task !== null)
    {
        taskList = JSON.parse(task);
    }
    
    return taskList;
}

function add()
{
    var task = document.getElementById("task").value;
    var array = getArray();
    
    array.push(task);
    localStorage.setItem("ToDoTasks", JSON.stringify(array));
    show();
    
    return false; // return false just to prevent memory leaks!
}

function show()
{
    var array = getArray();
    var htmlFormat = "<ul>";
    
    for(var i = 0 ; i < array.length ; i++)
    {
        htmlFormat += "<li>" + array[i] + "</li><button class='remove' id='"+i+"'>X</button> ";
    }
    
    htmlFormat += "</ul>";
    
    document.getElementById("taskList").innerHTML = htmlFormat;
    
    var buttons = document.getElementsByClassName("remove");
    
    for(var j = 0 ; j < buttons.length ; j++)
    {
            buttons[j].addEventListener("click", remove);
    }
    
}

document.getElementById("add").addEventListener("click", add);
show();
